<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OTP Generator - Admin Panel</title>
    <style>
        body { 
            font-family: Arial, sans-serif; 
            max-width: 600px; 
            margin: 50px auto; 
            padding: 20px; 
        }
        h1 { text-align: center; }
        .form-group { margin: 15px 0; }
        label { display: block; margin-bottom: 5px; }
        input { 
            width: 100%; 
            padding: 10px; 
            border: 1px solid #ccc; 
            border-radius: 3px; 
            box-sizing: border-box; 
        }
        button { 
            background: #28a745; 
            color: white; 
            padding: 12px 24px; 
            border: none; 
            border-radius: 3px; 
            cursor: pointer; 
            width: 100%; 
        }
        button:hover { background: #218838; }
        #result { 
            margin: 20px 0; 
            padding: 15px; 
            border: 1px solid #ddd; 
            border-radius: 3px; 
            background: #f8f9fa; 
            display: none; 
        }
        #generatedOTP { 
            font-size: 24px; 
            font-weight: bold; 
            color: #007bff; 
            text-align: center; 
            margin: 10px 0; 
        }
        .error { color: red; }
        .success { color: green; }
        #activeOTPs { 
            margin-top: 30px; 
            border-top: 1px solid #ddd; 
            padding-top: 20px; 
        }
        .otp-item { 
            padding: 10px; 
            margin: 5px 0; 
            background: #f1f1f1; 
            border-radius: 3px; 
            display: flex; 
            justify-content: space-between; 
            align-items: center; 
        }
        .delete-btn { 
            background: #dc3545; 
            color: white; 
            border: none; 
            padding: 5px 10px; 
            border-radius: 3px; 
            cursor: pointer; 
        }
    </style>
</head>
<body>
    <h1>OTP Generator - Admin Panel</h1>
    
    <div class="form-group">
        <label for="emailInput">Email Address:</label>
        <input type="email" id="emailInput" placeholder="Enter user email" required>
    </div>
    
    <button onclick="generateOTP()">Generate OTP</button>
    
    <div id="result">
        <div id="message"></div>
        <div id="generatedOTP"></div>
        <p><small>OTP is valid for 10 minutes</small></p>
    </div>

    <div id="activeOTPs">
        <h3>Active OTPs</h3>
        <button onclick="loadActiveOTPs()" style="background: #17a2b8; margin-bottom: 15px;">Refresh Active OTPs</button>
        <div id="otpList"></div>
    </div>

    <script type="module">
        import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.7.0/firebase-app.js';
        import { getFirestore, doc, setDoc, collection, getDocs, deleteDoc } from 'https://www.gstatic.com/firebasejs/10.7.0/firebase-firestore.js';

        const firebaseConfig = {
            apiKey: "AIzaSyDPeNlcSpTe2oOySKcdfh9ykQzHVTDSwzk",
            authDomain: "otp-gen-4d684.firebaseapp.com",
            projectId: "otp-gen-4d684",
            storageBucket: "otp-gen-4d684.firebasestorage.app",
            messagingSenderId: "1092826485280",
            appId: "1:1092826485280:web:1a2b5b38f002a793246245"
        };

        const app = initializeApp(firebaseConfig);
        const db = getFirestore(app);

        window.generateOTP = async function() {
            const email = document.getElementById('emailInput').value.trim();
            const resultDiv = document.getElementById('result');
            const messageDiv = document.getElementById('message');
            const otpDiv = document.getElementById('generatedOTP');

            if (!email) {
                messageDiv.innerHTML = '<span class="error">Please enter a valid email address</span>';
                resultDiv.style.display = 'block';
                return;
            }

            try {
                // Generate 6-digit OTP
                const otp = Math.floor(100000 + Math.random() * 900000).toString();
                const timestamp = new Date().getTime();
                
                // Create document ID from email (replace @ and . with underscores)
                const docId = email.replace('@', '_').replace(/\./g, '_');
                
                // Store OTP in Firestore
                await setDoc(doc(db, 'otps', docId), {
                    email: email,
                    otp: otp,
                    timestamp: timestamp,
                    generated: new Date().toISOString()
                });

                messageDiv.innerHTML = '<span class="success">OTP generated successfully for: ' + email + '</span>';
                otpDiv.textContent = otp;
                resultDiv.style.display = 'block';
                
                // Clear input
                document.getElementById('emailInput').value = '';
                
                // Refresh active OTPs list
                loadActiveOTPs();
                
            } catch (error) {
                console.error('Error generating OTP:', error);
                messageDiv.innerHTML = '<span class="error">Error generating OTP. Please try again.</span>';
                resultDiv.style.display = 'block';
            }
        };

        window.loadActiveOTPs = async function() {
            const otpListDiv = document.getElementById('otpList');
            
            try {
                const querySnapshot = await getDocs(collection(db, 'otps'));
                const now = new Date().getTime();
                let activeOTPs = [];
                
                querySnapshot.forEach((doc) => {
                    const data = doc.data();
                    const timeDiff = now - data.timestamp;
                    
                    // Only show OTPs that are still valid (less than 10 minutes old)
                    if (timeDiff <= 600000) {
                        activeOTPs.push({
                            id: doc.id,
                            ...data,
                            timeLeft: Math.ceil((600000 - timeDiff) / 1000)
                        });
                    }
                });
                
                if (activeOTPs.length === 0) {
                    otpListDiv.innerHTML = '<p>No active OTPs</p>';
                } else {
                    otpListDiv.innerHTML = activeOTPs.map(otp => `
                        <div class="otp-item">
                            <div>
                                <strong>${otp.email}</strong><br>
                                OTP: <strong>${otp.otp}</strong><br>
                                <small>Expires in: ${Math.floor(otp.timeLeft / 60)}:${String(otp.timeLeft % 60).padStart(2, '0')}</small>
                            </div>
                            <button class="delete-btn" onclick="deleteOTP('${otp.id}')">Delete</button>
                        </div>
                    `).join('');
                }
                
            } catch (error) {
                console.error('Error loading active OTPs:', error);
                otpListDiv.innerHTML = '<p class="error">Error loading OTPs</p>';
            }
        };

        window.deleteOTP = async function(docId) {
            try {
                await deleteDoc(doc(db, 'otps', docId));
                loadActiveOTPs(); // Refresh the list
            } catch (error) {
                console.error('Error deleting OTP:', error);
                alert('Error deleting OTP');
            }
        };

        // Load active OTPs on page load
        window.addEventListener('load', loadActiveOTPs);
        
        // Auto-refresh active OTPs every 30 seconds
        setInterval(loadActiveOTPs, 30000);
    </script>
</body>
</html>
